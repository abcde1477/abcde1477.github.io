<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自然原语</title>
  
  <subtitle>Natural Primitive</subtitle>
  <link href="http://abcde1477.github.io/atom.xml" rel="self"/>
  
  <link href="http://abcde1477.github.io/"/>
  <updated>2024-09-23T04:51:17.619Z</updated>
  <id>http://abcde1477.github.io/</id>
  
  <author>
    <name>abcde1477</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>部署一台新服务器</title>
    <link href="http://abcde1477.github.io/2024/09/21/new-server-and-openvpn/"/>
    <id>http://abcde1477.github.io/2024/09/21/new-server-and-openvpn/</id>
    <published>2024-09-21T14:53:28.000Z</published>
    <updated>2024-09-23T04:51:17.619Z</updated>
    
    <content type="html"><![CDATA[<p>最近又部署了台服务器，毕竟公网ip的电信宽带不能浪费。机子是N5095工控机，24年2月买的，原先准备替换原有的服务器以降低功耗低，(旧服务器准备替换下做家用机给家里人用)，但是测试之后发现<strong>性能不太行</strong>，于是准备留着当备用服务器。  </p><p>主板300¥，加上内存ssd机箱500¥。当初觉得它x86+15w功耗是个不错的亮点，所以决定入手的。<strong>但半个月之后就后悔了，家里有台废弃不用的笔记本，不比它更好，功率就二十几w，还自带显示器键盘电池...</strong>。以后还是少捡点垃圾…</p><p>这台机子刷过ubuntu server测性能，之后刷了windows10发现太卡。最后决定作为备用服务器用，拖到今天，准备安装ubuntu desktop，尝尝鲜，并使用openvpn而不是直接把资源放公网</p><h2 id="机子照片"><a href="#机子照片" class="headerlink" title="机子照片"></a>机子照片</h2><center><div style="display: grid; grid-template-columns: 1fr 1fr; align-items: center; justify-items: center; width: 80%;">    <div>        <img src="/images/posts/new-server-and-openvpn/with-cover.jpg"             style="width: 100%; height: auto;">    </div>    <div>        <img src="/images/posts/new-server-and-openvpn/no-cover.jpg"             style="width: 100%; height: auto;">    </div>    <div style="grid-column: 1 / -1; text-align: center;">        <i>服务器，取下盖子后能看到没接线的硬盘，因为商家没送螺丝和sata线...</i>    </div></div></center><br><p>以后会把所有服务器的图片拍一张传上来…我的服务器太多了，一台ubuntu server，一台windows server，还有这一台ubuntu desktop…</p><span id="more"></span><h2 id="遇到的问题和解决思路"><a href="#遇到的问题和解决思路" class="headerlink" title="遇到的问题和解决思路"></a>遇到的问题和解决思路</h2><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>服务器是N5095工控机，显卡是intel核显。在安装ubuntu时就出现了问题，启动镜像后，只有壁纸没有GUI。在一番搜索之后，发现是ubuntu的intel驱动问题。  </p><ol><li>安装ubuntu系统<br> 首先在u盘grub页面，在install ubuntu一行按e来修改参数<br> 在 linux &#x2F;boot&#x2F;vmlinuz一行，添加nomodeset到行尾，然后启动<br> 接下来就能正常显示GUI了，随着引导进行设置即可</li><li>永久化设置<br> 系统完成安装之后，拔出系统介质重启，会发现ubuntu启动动画结束后即是黑屏<br> 此时不要担心,ctrl+alt+f4,此时熟悉的TTY界面就出来了<br> 登入文字终端，修改&#x2F;etc&#x2F;default&#x2F;grub文件，将  GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet splash”<br> 修改为<br> GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet splash nomodeset”<br> 然后保存，输入sudo update-grub2,然后输入sudo reboot以重启</li></ol><p>参考文档:<a href="https://www.dell.com/support/kbdoc/zh-hk/000123893/%E6%89%8B%E5%8B%95-nomodeset-%E5%85%A7%E6%A0%B8%E9%96%8B%E6%A9%9F%E8%A1%8C%E9%81%B8%E9%A0%85-linux-%E5%95%9F%E5%8B%95">適用于 Linux boot 的手動「nomodeset」內核開機線路選項 </a><br><em>我发繁中文档而不是简中的原因是，简中的文档好像最后一张图片加载不出来，繁中可以</em></p><h3 id="openvpn"><a href="#openvpn" class="headerlink" title="openvpn"></a>openvpn</h3><p>配置过程由GPT给出…我共享了这个会话:<a href="https://chatgpt.com/share/66efe516-1104-8012-a22f-4caa5b1639e0">GPT会话链接</a></p><p>配置好了openvpn，会发现无法连接到另一个客户端的smb服务，这是因为没有在server.config中取消注释<code>client-to-client</code>导致的,取消注释后，重新启动服务即可<code>sudo systemctl restart openvpn@server</code>  </p><p><del>解决了连接的问题还有质量问题没有解决，这时候的带宽低的离谱，40Mbps的上行宽带完全没有体现出来。这里有个优化方案,给服务器和客户端都加上配置</del>  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#comp-lzo 注释掉压缩，我没有这么做</span></span><br><span class="line"><span class="string">sndbuf</span> <span class="number">0</span>    <span class="comment">##优化项</span></span><br><span class="line"><span class="string">rcvbuf</span> <span class="number">0</span>    <span class="comment">##优化项</span></span><br></pre></td></tr></table></figure><p><del>这样貌似能将将缓冲区大小的设置交给操作系统</del><br><del><a href="http://www.xixicool.com/870.html">openvpn 网络速率优化，解决客户端网络慢的问题 </a></del><br>因为以下原因的存在，不能确定以上方法是否有效</p><p><del>尽管如此设置，仍然无法达到40Mbps。后来发现应该是电信设置了一些限制。实际测试，client-to-client,使用iperf3，电信上传移动下载，速率6Mbps(没进行上一步优化时是1Mbps)；电信下载移动上传，速率30Mbps。我是看这篇帖子才知道的：<a href="https://www.v2ex.com/t/641034">疑似电信上行对 SSL 协议流量进行 QoS 调度？</a><br>然后到了学校，试着用vpn连这台服务器的远程桌面，完全麻了。1MB&#x2F;s的限速卡的不得了…这个问题还得以后解决…</del><br>找了客服一趟，电信客服那边询问了用途，并认为6~8Mbps上传确实不行，说可以报修。以后再去叫维修师傅上门看看</p><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>windows不用说，可以直接使用rdp<br>但是ubuntu应该用什么我真不知道，所以我再次求助GPT<br>GPT给我推荐tightvncserver和xrdp，我共享了这个会话:<a href="https://chatgpt.com/share/66efe807-a058-8012-b985-7aa15db1fdd3">GPT会话链接</a>  </p><p>权衡之后，我选择了xrdp。这个协议能直接使用微软rdp客户端，省去额外找客户端的事了。和windows一样，rdp是账号密码登入，而且是系统的账号密码，所以把rdp暴露在公网这种行为：**”看似危险，其实一点也不安全”**。<br>(之前确实一直这么用了半年，后来才发现被爆破了很久，于是不再长期在公网端口转发rdp，ssh也改为密钥登入了)<br>不过这次使用了openvpn之后，就能放心使用账户密码登入了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt install xrdp</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> xrdp</span><br><span class="line"><span class="built_in">sudo</span> systemctl start xrdp</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status xrdp</span><br></pre></td></tr></table></figure><p>尝试了一下，ubuntu使用xrdp和windows下的rdp一样，不能同时登入同一用户。但是ubuntu下不能抢占(不挤占原先的登入)会话，必须手动结束会话;windows下是抢占(原先的连接会注销)并接管会话。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>之前是在23年江西那边申请的电信公网IP，只需要给客服报出宽带账号就可以改了。<br>这次在浙江这边申请电信公网IP，客服要求报出身份证号码，而且需要是宽带办理人的身份证号码(一开始报自己的，说没查到有办理宽带)<br>配置这个服务器花了一天的时间，以后应该不会再添新的服务器了，已经没啥需求需要我再折腾了。<br>不过现在有那么多服务器，确实可以搞一下分布式存储方案。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近又部署了台服务器，毕竟公网ip的电信宽带不能浪费。机子是N5095工控机，24年2月买的，原先准备替换原有的服务器以降低功耗低，(旧服务器准备替换下做家用机给家里人用)，但是测试之后发现&lt;strong&gt;性能不太行&lt;/strong&gt;，于是准备留着当备用服务器。  &lt;/p&gt;
&lt;p&gt;主板300¥，加上内存ssd机箱500¥。当初觉得它x86+15w功耗是个不错的亮点，所以决定入手的。&lt;strong&gt;但半个月之后就后悔了，家里有台废弃不用的笔记本，不比它更好，功率就二十几w，还自带显示器键盘电池...&lt;/strong&gt;。以后还是少捡点垃圾…&lt;/p&gt;
&lt;p&gt;这台机子刷过ubuntu server测性能，之后刷了windows10发现太卡。最后决定作为备用服务器用，拖到今天，准备安装ubuntu desktop，尝尝鲜，并使用openvpn而不是直接把资源放公网&lt;/p&gt;
&lt;h2 id=&quot;机子照片&quot;&gt;&lt;a href=&quot;#机子照片&quot; class=&quot;headerlink&quot; title=&quot;机子照片&quot;&gt;&lt;/a&gt;机子照片&lt;/h2&gt;&lt;center&gt;&lt;div style=&quot;display: grid; grid-template-columns: 1fr 1fr; align-items: center; justify-items: center; width: 80%;&quot;&gt;
    &lt;div&gt;
        &lt;img src=&quot;/images/posts/new-server-and-openvpn/with-cover.jpg&quot; 
            style=&quot;width: 100%; height: auto;&quot;&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;img src=&quot;/images/posts/new-server-and-openvpn/no-cover.jpg&quot; 
            style=&quot;width: 100%; height: auto;&quot;&gt;
    &lt;/div&gt;
    &lt;div style=&quot;grid-column: 1 / -1; text-align: center;&quot;&gt;
        &lt;i&gt;服务器，取下盖子后能看到没接线的硬盘，因为商家没送螺丝和sata线...&lt;/i&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;以后会把所有服务器的图片拍一张传上来…我的服务器太多了，一台ubuntu server，一台windows server，还有这一台ubuntu desktop…&lt;/p&gt;</summary>
    
    
    
    <category term="部署" scheme="http://abcde1477.github.io/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="基建向" scheme="http://abcde1477.github.io/tags/%E5%9F%BA%E5%BB%BA%E5%90%91/"/>
    
    <category term="服务器" scheme="http://abcde1477.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>24h自动化直播网站(头文字D)</title>
    <link href="http://abcde1477.github.io/2024/09/06/develop-live-website/"/>
    <id>http://abcde1477.github.io/2024/09/06/develop-live-website/</id>
    <published>2024-09-06T08:45:40.000Z</published>
    <updated>2024-09-23T12:51:08.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>这是一个拖了一个月的项目…能24小时直播头文字d的网站。<br>除了可以看动漫外，这个网站还内置了公共聊天室，并实现了投票切集功能。<br>当初构思的时候，想推头文字D这动漫，想着直接推应该没人会看，我要不直接搭个网站，这不就有人会看了。还能学习直播环境的搭建。<br>于是我就开始了这个一拍脑袋“有了”，一拍大腿“坏了”的冤种项目</p><span id="more"></span><p>网址是：<strong><em>此文档不公布网址</em></strong><br>此网址末尾加上&#x2F;admin就是测试页面，显示了后端运行过程中的ffmpeg输出。懒得删就留在这了。如果中途切集或者刚刚开始或者结束会有不一样的输出。</p><h3 id="显示不安全的连接"><a href="#显示不安全的连接" class="headerlink" title="显示不安全的连接"></a>显示不安全的连接</h3><p>选择高级-&gt;接受风险并继续。详细解释在下面，选择权在你。<br>因为没钱(或者说觉得麻烦),就没买域名也没整ssl证书(买或者免费领90天ssl证书需要你实际拥有这个域名,而我这个域名是一个ddns服务商免费给的，要30天一认领，所有权不在我)，所以我用的是自签名证书，用户点进去是一定会报不安全的连接的，详情见https部分。自签名证书风险是难以抵御中间人攻击 (无法证明用户连接的就是我的网站)，但仍然实现了加密传输。</p><h3 id="直播内容"><a href="#直播内容" class="headerlink" title="直播内容"></a>直播内容</h3><p>目前设置的直播内容是《头文字D First stage》，之所以选择头文字D，是因为这是我最近看过的唯一古早动漫，模糊的画质可以减缓服务器的流量压力，而且《头文字D》雀氏浩勘，激斗情节的跌宕堪比JOJO，配乐神级插入，驾驶科普部分也让人眼前一亮…(会不会吹的有点过了)。</p><h3 id="预留"><a href="#预留" class="headerlink" title="预留"></a>预留</h3><p>在编写过程中，为了未来能够复用代码，我做出了相应的预留。<br>把启动ffmpeg的代码设计为一个模块了，只需要简单的修改可以把直播内容换成别的视频。<br>还有给视频源批量转码的ffmpeg脚本也在，给视频文件预处理成合适的码率和格式很方便。</p><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>项目在未来应该会开源，但估计会先做出些改进，代码写的难看被人知道也不太好…。然后还会写一些部署步骤，看未来什么情况吧，如果时间实在紧张的话被鸽了也在意料之中。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>大致效果如下，交互只有留言和投票。</p><div>    <img src="/images/posts/live-website/initialD截图.png"     style=" width: 60%; height: auto; margin-bottom: 20px;">    </img>    <div><center><i>大体效果</i></center></div></div><div>    <img src="/images/posts/live-website/投票.png"     style=" width: 60%; height: auto; margin-bottom: 20px;">    </img>    <div><center><i>投票系统(被遮挡的留言区域会空出)</i></center></div></div><h3 id="开发者的吐槽"><a href="#开发者的吐槽" class="headerlink" title="开发者的吐槽"></a>开发者的吐槽</h3><p>当初觉得这个项目应该挺简单的，也是抱着玩一玩的态度设计的，以为三四天左右就能搞好。<br>但后面发现这个项目的时间投入越来越无底洞起来，不断的发现当前方案的小bug，效果达不到预期。于是就不断的学习，修复，局部重构。方案换了好几版。<br>到现在可以说是了解了一个直播项目的架构了，也顺便尝试了神级编码工具ffmpeg的使用(现在简单的视频裁切,合并,编码只用命令行就能搞确实方便)。早期编译带插件的nginx时打算在docker中运行，于是自己写dockerfile，也学了些docker编译的操作，docker雀食方便，如果能解决网络问题的话。<br>最后回顾一下，我认为这里使用的架构也可以用于web摄像头。总之即使这个idea比较神经，但是最后挑选出来的架构方案是比较有意义的。  </p><p>暑假时间除了简单的娱乐之外，还在自学《编译原理》，然后才是这个项目，推进的比较随缘，加上方案的变更，时间拉的特别长。说实话，现在赶工写完只是不想让它烂尾了，寒假时我的一个整合即时聊天+文件网络共享的项目已经被废弃了，见<a href="%22/about%22">部署开源聊天软件tailchat</a>。  </p><h4 id="直播基本步骤"><a href="#直播基本步骤" class="headerlink" title="直播基本步骤"></a>直播基本步骤</h4><p>推流程序-&gt;流媒体服务器-&gt;客户看到的前端页面<br>现在的方案是:<br>ffmpeg以rtmp协议推流-&gt;SRS作为流媒体服务器-&gt;前端使用mpegts.js以http-flv协议拉流播放,</p><h4 id="方案里一直没变的部分"><a href="#方案里一直没变的部分" class="headerlink" title="方案里一直没变的部分:"></a>方案里一直没变的部分:</h4><p>前后端分离。前端vue框架+naiveUI组件库；后端使用node，ffmpeg用于动漫播放推流，node通过启动ffmpeg子进程的方式来实现动漫播放控制。</p><h4 id="方案更变的简单记录"><a href="#方案更变的简单记录" class="headerlink" title="方案更变的简单记录"></a>方案更变的简单记录</h4><p>v1:  流媒体服务器使用nginx加http-rtmp模块,前端web播放器还在做选择<br>(nginx加装插件需要手动编译…被迫学习如何编译nginx)</p><p>v2:  敲定直播协议，选择rtmp协议推流，http-flv协议拉流，流媒体服务器改用nginx加http-flv模块，前端使用flv.js拉流播放<br>(说起来http-flv模块是GPT给我推荐的，我说我想要一个支持http-flv的流媒体服务器…实际上配置复杂，性能也不太好，文档不清晰，应该是作者先是自用然后再开源的，对新人不太友好，我也没时间去解读源码…)</p><p>v3: 发现nginx+http-flv模块作为流媒体服务器运行不太正常，经常会卡死。于是更换流媒体服务器为SRS,nginx只作为静态服务器和反向代理。<br>(使用docker部署SRS真的方便啊，只需要一条指令，开箱即用)</p><p>v4: 发现flv.js很久没用更新了，用作直播有很多小bug，后来发现flv.js作者原b站员工，后来离职了，项目放在bilibili的仓库那，自己没法更新，于是改用作者的新播放器mpegts.js<br>(这是最终版本了…)</p><div>    <img src="/images/posts/live-website/架构.png"     style=" width: 60%; height: auto; margin-bottom: 20px;">    </img>    <div><center><i>最终的架构图</i></center></div></div><h3 id="用到的所有库-平台和工具"><a href="#用到的所有库-平台和工具" class="headerlink" title="用到的所有库,平台和工具"></a>用到的所有库,平台和工具</h3><p>vite用于构建前端项目以及前端开发调试<br>vue作为前端框架<br>naiveUI，一个vue组件库<br>mpegts.js，一个web播放器，支持多种格式的视频流播放<br>socket.io，一个基于事件的双向网络交流库，信息交互的API是发送事件的形式，底层协议是websocket或http(长连接)</p><p>node.js，跨平台的JavaScript运行时环境，我用作服务器后端，处理网络服务与事物逻辑，并且负责视频推流的控制<br>express，node.js的服务器框架<br>mysql2，用于在node.js上与mysql服务器进行连接的库<br>ffmpeg，强大的命令行视频编码工具，也可以用于视频推流，我在node.js中以子进程的方式进行调用</p><p>nginx，网关服务器，设置https以及分发静态资源(比如前端页面)<br>SRS，开源的流媒体服务器，性能不错<br>mysql，数据库软件，用于持久化存储</p><p>WebStorm，互联网相关的集成开发环境，远程开发功能很好用，我的整个开发过程只有早期是在本地的，后面一直都在服务器上进行的，服务器上配置过网关，开发测试十分方便。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h3&gt;&lt;p&gt;这是一个拖了一个月的项目…能24小时直播头文字d的网站。&lt;br&gt;除了可以看动漫外，这个网站还内置了公共聊天室，并实现了投票切集功能。&lt;br&gt;当初构思的时候，想推头文字D这动漫，想着直接推应该没人会看，我要不直接搭个网站，这不就有人会看了。还能学习直播环境的搭建。&lt;br&gt;于是我就开始了这个一拍脑袋“有了”，一拍大腿“坏了”的冤种项目&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="http://abcde1477.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="单页应用" scheme="http://abcde1477.github.io/tags/%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8/"/>
    
    <category term="学习向项目" scheme="http://abcde1477.github.io/tags/%E5%AD%A6%E4%B9%A0%E5%90%91%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="直播" scheme="http://abcde1477.github.io/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>自建博客</title>
    <link href="http://abcde1477.github.io/2024/09/06/deploy-blog/"/>
    <id>http://abcde1477.github.io/2024/09/06/deploy-blog/</id>
    <published>2024-09-06T08:42:10.000Z</published>
    <updated>2024-09-23T04:58:34.847Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近搞了几个项目，想把介绍内容放在网上。<strong>但是内容太多，随便乱放管理起来麻烦</strong>，于是开始张罗博客搭建，给越来越多的内容找一个安身之处。<br><em>(只是记录，所以有点流水账了，我会尽量将有用的消息标注出来。另外，在此之前的推文是后补的,所示时间为部署时间)</em></p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>试了很多的博客<br>halo, hexo, hugo<br>试了一圈后就开始考虑使用动态博客还是静态博客，以及部署难度了。  </p><span id="more"></span><p>动态博客，需要一个服务器提供支持，所以我只能部署到自己的服务器上用自己的域名<br>静态博客能导出一份静态站点文件，只需要一个内容分发服务就可以实现部署。而且，<span style="color: #e67e23;"><strong>github pages能免费提供的静态站点托管服务，并且免费提供一个域名</strong></span>，使用静态博客导出的文件可以直接部署上去。</p><p>权衡之下，考虑到某些因素就放弃了本地部署博客了，准备使用静态博客并上github pages</p><h3 id="halo"><a href="#halo" class="headerlink" title="halo"></a>halo</h3><p>halo的页面挺美观，社区也挺活跃，docker-compose部署很方便，而且还有后台管理，能在后台页面发布推文，设置主题。<br>halo是动态博客，而且目前<span style="color: #e67e23;"><strong>没有什么好的静态导出插件</strong></span>，试用了一会就转向考虑静态博客了。</p><h3 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h3><p>使用php，是目前使用最广泛的网站构建框架，博客网站也是其中之一。<span style="color: #e67e23;"><strong>全球有大约43%的网站都是使用WordPress架设网站的</strong></span>。所以这个网站的<span style="color: #e67e23;"><strong>生态非常丰富</strong></span>，google搜索几乎能解决任何使用问题<br>虽然没用过，但由搜索得出的结果是:<span style="color: #e67e23;"><strong>这个网站框架有静态导出插件</strong></span>。</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>使用node.js的静态博客框架，使用了一会感觉蛮不错的，<span style="color: #e67e23;"><strong>搭建非常简单，中文文档详细</strong></span>。<br>虽然有后台插件hexo-admin，但是这个hexo-admin很久没更新了。因为后台只是能用的状态，所以就再试了下hugo。<br>然后找了个star最多的主题(hexo-theme-next), <span style="color: #e67e23;"><strong>hexo-theme-next主题的原作者放弃了维护，目前由社区开始维护后续版本</strong></span></p><p>我现在在使用的markdown编辑工具是joplin，它最吸引我的功能是<span style="color: #e67e23;"><strong>可以自建webdav服务器,用于多设备同步笔记</strong></span>。<br>话题转向hexo，巧的是<span style="color: #e67e23;"><strong>joplin有发布在hexo的插件</strong></span>，所以我最终敲定使用hexo建站了。</p><h3 id="hugo"><a href="#hugo" class="headerlink" title="hugo"></a>hugo</h3><p>使用go编写的静态博客框架，官方文档打出的招牌是”<span style="color: #e67e23;"><strong>最快的网站构造框架</strong></span>“。很多人在使用hexo上传了上百个推文后，就因为性能问题转向hugo了。我因为hexo没有好用的后台而决定试用这个，然后我经历了最近一天里最大的挫败，<span style="color: #e67e23;"><strong>配置异常的困难</strong></span>，非常困难，而且<span style="color: #e67e23;"><strong>官方文档没有中文</strong></span>。<br>按照hugo的文档，你可以很简单的搭建这个网站，然后你只能止步于此。后面的文档就很难搞懂，为什么会是这样？为什么这个文件夹会存在？为什么这里突然出现了一个没有经过说明的名词？为什么我跳转到这个名词之后还有再看别的名词解释？<br>我初始化得到的文件里没有啊？如何微调显示效果？试了半天还是没有任何结果。<br><em><span style="color: #7e8c8d;">不只是我,我搜索知乎发现一篇翻译过后的国外某人对hugo的评价，也是在抱怨这个:</span><a href="https://zhuanlan.zhihu.com/p/479344529?utm_psn=1815416519213064192" title="为什么 Hugo 的文档如此糟糕？">为什么 Hugo 的文档如此糟糕？</a></em><br>最后回想起来，我试hugo的原因只是看看这个框架有没有后台管理页，然后发现，<span style="color: #e67e23;"><strong>hugo没有后台管理页面</strong></span>。于是我就只考虑hexo了</p><h2 id="hexo-next-theme-部署"><a href="#hexo-next-theme-部署" class="headerlink" title="hexo(next theme)部署"></a>hexo(next theme)部署</h2><p>详情见官方文档<br><a href="https://hexo.io/zh-cn/docs">hexo-文档</a><br><em>下面两个都是社区维护版的,原作者放弃维护</em><br><a href="https://github.com/theme-next/hexo-theme-next/tree/master/docs/zh-CN">theme-next(github文档里的中文md)</a><br><a href="https://theme-next.js.org/">theme-next(官方博客,我没找到中文)</a></p><ol><li>安装hexo<br>多种方式<br><code>npm install hexo-cli -g</code> :使用npm全局安装<br><code>brew install hexo</code>:使用brew安装(macOS)</li><li>创建网站<br><code>hexo init blog</code>: 创建一个以blog为名的网站<br>(然后当前工作目录下会产生一个blog文件架)<br><code>cd blog</code>:进入此文件夹</li><li>安装主题<br><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>克隆主题项目到theme&#x2F;next下<br>在blog&#x2F;_config.yml中修改 <code>theme</code>项的值为<code>next</code></li><li>创建贴推文<br><code>hexo new [layout] &lt;title&gt;</code>： layout默认是post，然后就能在blog&#x2F;source&#x2F;_post下看到&lt;title&gt;.md文件了<br>详情见<a href="https://hexo.io/zh-cn/docs/writing">hexo-写作</a></li><li>微调<ul><li>hexo设置<br>  位置在blog&#x2F;_config.yml<br>  <code>Site</code>那一栏填主要信息</li><li>主题设置<br>  <del>位置在blog&#x2F;themes&#x2F;next&#x2F;_config.yml</del>(根据hexo文档，如此修改不规范)<br>  创建blog&#x2F;_config.next.yml，将blog&#x2F;themes&#x2F;next&#x2F;_config.yml的内容复制进去<br>  <code>Schemes</code>可以调整预设，有四种预设<br>  <code>avatar</code>可以调整作者信息</li></ul></li></ol><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>对博客做出修改的方法在下面</p><h3 id="设置点击侧栏头像进入-about"><a href="#设置点击侧栏头像进入-about" class="headerlink" title="设置点击侧栏头像进入&#x2F;about"></a>设置点击侧栏头像进入&#x2F;about</h3><p>hexo-next主题没有做出此功能。<br>看了半天没有好的方法, 修改_config.next.yml的<code>custom_file_path: sidebar: source/_data/sidebar.swig</code>，并在source&#x2F;_data&#x2F;sidebar.swig写代码，也只能在侧栏底部增加这部分内容，没法实现替换。<br>所以只能使用最简单的方法了，即使next文档说不推荐直接修改，因为实没办法  </p><ol><li>打开 themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;sidebar&#x2F;site-overview.swig</li><li>直接做出修改(第一个<code>&lt;div&gt;</code>，给<code>&lt;img&gt;</code>标签嵌套一个<code>&lt;a href=&quot;/about&quot;&gt;</code>的标签)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-author motion-element&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;author&quot;</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/Person&quot;</span>&gt;</span></span><br><span class="line">&#123;%- if theme.avatar.url %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;site-author-image&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;image&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&#123;&#123; author &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(theme.avatar.url) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;site-author-name&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; author &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-description&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;description&quot;</span>&gt;</span>&#123;&#123; description &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>hexo clean</code>清理缓存</li><li><code>hexo g</code>构建</li><li><code>hexo deploy</code>推到githubPages上</li></ol><h3 id="加入RSS功能"><a href="#加入RSS功能" class="headerlink" title="加入RSS功能"></a>加入RSS功能</h3><p>安装hexo的rss插件<code>npm install hexo-generator-feed</code><br>hexo-next貌似有几个地方都可以添加RSS，经过测试，以下方式加入是可以的  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-----#####</span> <span class="string">in</span> <span class="string">_config.next.yml</span> <span class="comment">#####-----</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># RSS: /atom.xml || fa fa-rss ##这个默认不在文档中，但仍然可以这么设置</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/abcde1477</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="comment"># RSS: /atom.xml || fa fa-rss ##这个默认不在文档中，但仍然可以这么设置</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  <span class="comment">#RSS: /atom.xml || fa fa-rss ##这个默认在文档中，但只放RSS不太好看</span></span><br></pre></td></tr></table></figure><br><p><strong>效果图:</strong></p><center>  <div style="display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 400px; auto auto; gap: 20px; width: 80%;">    <!-- 第一行的两张图片，设定固定高度 -->    <div>      <img src="/images/posts/deploy-blog/menu-rss.png" style="width: auto; height: 100%; object-fit: contain;"      alt="菜单">    </div>    <div>      <img src="/images/posts/deploy-blog/social-rss.png" style="width: auto; height: 100%; object-fit: contain;"      alt="侧栏">    </div>    <!-- 第二行的第三张图片，跨两列 -->    <div style="grid-column: 1 / -1;">      <img src="/images/posts/deploy-blog/follow-rss.png" style="width: 100%; height: auto;"      alt="文章末尾">    </div>    <!-- 第三行的文本，跨两列 -->    <!--        <div style="grid-column: 1 / -1; text-align: center;">      <i>如上</i>    </div>    -->  </div></center><br><h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><p>以后对hexo博客做出修改的时候，会在这里补充</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为最近搞了几个项目，想把介绍内容放在网上。&lt;strong&gt;但是内容太多，随便乱放管理起来麻烦&lt;/strong&gt;，于是开始张罗博客搭建，给越来越多的内容找一个安身之处。&lt;br&gt;&lt;em&gt;(只是记录，所以有点流水账了，我会尽量将有用的消息标注出来。另外，在此之前的推文是后补的,所示时间为部署时间)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;选择&quot;&gt;&lt;a href=&quot;#选择&quot; class=&quot;headerlink&quot; title=&quot;选择&quot;&gt;&lt;/a&gt;选择&lt;/h2&gt;&lt;p&gt;试了很多的博客&lt;br&gt;halo, hexo, hugo&lt;br&gt;试了一圈后就开始考虑使用动态博客还是静态博客，以及部署难度了。  &lt;/p&gt;</summary>
    
    
    
    <category term="部署" scheme="http://abcde1477.github.io/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="基建向" scheme="http://abcde1477.github.io/tags/%E5%9F%BA%E5%BB%BA%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>部署开源聊天软件taichat</title>
    <link href="http://abcde1477.github.io/2024/08/09/deploy-tailchat/"/>
    <id>http://abcde1477.github.io/2024/08/09/deploy-tailchat/</id>
    <published>2024-08-09T11:36:50.000Z</published>
    <updated>2024-09-23T04:46:27.744Z</updated>
    
    <content type="html"><![CDATA[<p><strong>此推文未完成</strong><br><strong>此推文未完成</strong><br><strong>此推文未完成</strong><br>大二寒假的时候，想做一个带公共聊天室，能存储历史记录，文件托管(包括文件分割上传，哈希比较减少重复上传，支持下载重试)等功能。但是非常不幸的是，这个项目烂尾了。<br>具体的说是:前期技术不足，就想着边学边实现。后期技术满足开发需求，但是又发现有同类产品。所以寒假结束之后，过了一个月就决定放弃了。<br>我发现的同类产品，即是<strong>tailchat</strong>，虽然我所设计的是公共聊天室，而tailchat是即时聊天软件。但经过配置，可以实现新建用户自动加群的功能，这和公共聊天室无异。</p><p>大概花了两天完成了部署，其中3&#x2F;4的时间都花在了docker的配置上，因为最近几个月正好赶上了国内docker镜像源全数关闭的事，安装代理，配置代理花费了我大量的时间。<strong>此文末会注上docker无法访问源的解决方法</strong><br>网址:<strong><em>此文档不公布网址</em></strong></p><span id="more"></span><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><!-- 想烂尾了，不想搞了，全忘了，就是莫名其妙安装好了。而且这东西也不一定干净--><h2 id="安装docker的问题"><a href="#安装docker的问题" class="headerlink" title="安装docker的问题"></a>安装docker的问题</h2><h3 id="环境变量的介绍"><a href="#环境变量的介绍" class="headerlink" title="环境变量的介绍"></a>环境变量的介绍</h3><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p><em>docker文档(安装): <a href="https://docs.docker.com/engine/install/">Install Docker Engine</a><br>这里主要说的是linux下的docker安装，mac直接在官网下载dmg镜像安装就行了。<br>其次，linux下有提供了两种docker，docker-engine和docker-desktop。desktop版本提供了图形界面，二者的安装位置不同，可以同时运行，因此其中一个docker安装&#x2F;运行的镜像&#x2F;容器不会在另一个docker中共享。</em><br>    我的服务器是服务器版的ubuntu，无图形界面。这里使用apt方式安装docker。<br>官方文档:<a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add Docker&#x27;s official GPG key:</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install ca-certificates curl</span><br><span class="line"><span class="built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class="line"><span class="built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc <span class="comment"># curl可以被环境变量影响的</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the repository to Apt sources:</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"><span class="built_in">sudo</span> apt-get update <span class="comment"># 这一步需要代理</span></span><br></pre></td></tr></table></figure><p>这里要使用代理软件进行，不然死活装不上。<br>首先下载一个代理软件，配置好之后，找到代理软件给出的代理端口。v2的代理默认地址是<a href="http://localhost:10808，将它设置为软件的代理地址，这个软件进行网络请求会默认给代理软件处理。">http://localhost:10808，将它设置为软件的代理地址，这个软件进行网络请求会默认给代理软件处理。</a><br><em>平常使用代理软件，不都是需要点击”设置为系统代理”吗？这个意思就是，将代理网址设置为环境变量(HTTP_PROXY,HTTPS_PROXY)，每次会读取环境变量的软件，就会知道使用这个代理网址进行代理。</em><br>所以上面的指令要加入特定的参数，使得下载走代理而不是直接连接:</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;此推文未完成&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;此推文未完成&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;此推文未完成&lt;/strong&gt;&lt;br&gt;大二寒假的时候，想做一个带公共聊天室，能存储历史记录，文件托管(包括文件分割上传，哈希比较减少重复上传，支持下载重试)等功能。但是非常不幸的是，这个项目烂尾了。&lt;br&gt;具体的说是:前期技术不足，就想着边学边实现。后期技术满足开发需求，但是又发现有同类产品。所以寒假结束之后，过了一个月就决定放弃了。&lt;br&gt;我发现的同类产品，即是&lt;strong&gt;tailchat&lt;/strong&gt;，虽然我所设计的是公共聊天室，而tailchat是即时聊天软件。但经过配置，可以实现新建用户自动加群的功能，这和公共聊天室无异。&lt;/p&gt;
&lt;p&gt;大概花了两天完成了部署，其中3&amp;#x2F;4的时间都花在了docker的配置上，因为最近几个月正好赶上了国内docker镜像源全数关闭的事，安装代理，配置代理花费了我大量的时间。&lt;strong&gt;此文末会注上docker无法访问源的解决方法&lt;/strong&gt;&lt;br&gt;网址:&lt;strong&gt;&lt;em&gt;此文档不公布网址&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="部署" scheme="http://abcde1477.github.io/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="基建向" scheme="http://abcde1477.github.io/tags/%E5%9F%BA%E5%BB%BA%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离的数据库系统</title>
    <link href="http://abcde1477.github.io/2024/06/11/develop-database-system/"/>
    <id>http://abcde1477.github.io/2024/06/11/develop-database-system/</id>
    <published>2024-06-11T11:59:03.000Z</published>
    <updated>2024-09-23T13:22:53.284Z</updated>
    
    <content type="html"><![CDATA[<p><em>看来每个计算机学生都要经过学生管理系统的洗礼…</em></p><p>这学期的数据库系统课程，老师布置了一个大作业。设计一个学生管理系统,并且需要做用户界面。<br>过去这个大作业是放在两周的小学期里完成的，但今年改为学期内完成，所以不要求上传源码(最放水的一集)<br>虽然主要内容肯定是数据库设计部分，应用程序部分只做静态UI都行。但最后我还是决定挑战自我，多用了点时间去学习如何使用vue和node.js构造一个单页应用，同时也是想让自己忘记上学期电影评价网站课设的灾难时刻…</p><h2 id="基本设计"><a href="#基本设计" class="headerlink" title="基本设计"></a>基本设计</h2><span id="more"></span><p>前后端分离，vue负责前端页面显示。后端node服务器不负责页面渲染，只负责逻辑处理。</p><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><h4 id="vue的基本特性"><a href="#vue的基本特性" class="headerlink" title="vue的基本特性"></a>vue的基本特性</h4><p>vue是一个前端框架，通过javascript实现对页面的设计，vue代码将导出为一份静态网页文件(html, js, css文件)。vue的特点是响应式设计，可以跟踪一个变量的变化，在变量变化时，触发对其他值的修改。</p><h4 id="单页应用设计"><a href="#单页应用设计" class="headerlink" title="单页应用设计"></a>单页应用设计</h4><p>前端路由捕获url变化，从而现实对应的组件。这样的结果是，url变化不再导致页面刷新,重新渲染了，取而代之的是，在当前已有的页面做出修改。用户也不用再被页面刷新的卡顿感烦恼了。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><h4 id="node-js的基本特性"><a href="#node-js的基本特性" class="headerlink" title="node.js的基本特性"></a>node.js的基本特性</h4><p>node.js是一个javascript的运行时环境，提供单线程的异步（这个特点也可以避免多线程读写问题），但是IO是多线程处理的</p><h3 id="鉴权设计"><a href="#鉴权设计" class="headerlink" title="鉴权设计"></a>鉴权设计</h3><p>使用token进行鉴权，与”会话”方式不同，token方式不在服务器端存储信息。<br>具体来说，token由服务器产生，且存在过期时间，登入成功后服务器返回一个token，token，客户端随后会将其保存在本地。客户端进行请求时需要附上token信息，若过期或不正确，将会要求返回登陆页面。</p><p>本项目使用JWT(JSON web token)，对于JWT，这位兄弟写的博客解释的比较透彻：<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;看来每个计算机学生都要经过学生管理系统的洗礼…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这学期的数据库系统课程，老师布置了一个大作业。设计一个学生管理系统,并且需要做用户界面。&lt;br&gt;过去这个大作业是放在两周的小学期里完成的，但今年改为学期内完成，所以不要求上传源码(最放水的一集)&lt;br&gt;虽然主要内容肯定是数据库设计部分，应用程序部分只做静态UI都行。但最后我还是决定挑战自我，多用了点时间去学习如何使用vue和node.js构造一个单页应用，同时也是想让自己忘记上学期电影评价网站课设的灾难时刻…&lt;/p&gt;
&lt;h2 id=&quot;基本设计&quot;&gt;&lt;a href=&quot;#基本设计&quot; class=&quot;headerlink&quot; title=&quot;基本设计&quot;&gt;&lt;/a&gt;基本设计&lt;/h2&gt;</summary>
    
    
    
    <category term="开发" scheme="http://abcde1477.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="单页应用" scheme="http://abcde1477.github.io/tags/%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8/"/>
    
    <category term="学习向项目" scheme="http://abcde1477.github.io/tags/%E5%AD%A6%E4%B9%A0%E5%90%91%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
